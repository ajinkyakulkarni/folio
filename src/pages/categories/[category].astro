---
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogCard from '../../components/BlogCard.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const allPosts = await getCollection('blog', ({ data }) => !data.draft);
  
  // Get all unique categories
  const categories = new Set();
  allPosts.forEach(post => {
    categories.add(post.data.category);
  });
  
  return Array.from(categories).map(category => ({
    params: { category: category.toLowerCase().replace(/\s+/g, '-') },
    props: { category }
  }));
}

const { category } = Astro.props;

// Get all posts in this category
const allPosts = await getCollection('blog', ({ data }) => 
  !data.draft && data.category === category
);

const authors = await getCollection('authors');

// Sort posts by date
const sortedPosts = allPosts.sort(
  (a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf()
);
---

<BaseLayout title={`Category: ${category}`} description={`Articles in ${category}`}>
  
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <!-- Header -->
    <div class="text-center mb-8">
      <div class="inline-flex items-center bg-indigo-100 rounded-full px-4 py-2 mb-4">
        <svg class="w-5 h-5 text-indigo-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
          <path d="M2 6a2 2 0 012-2h5l2 2h5a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6z"></path>
        </svg>
        <span class="text-indigo-700 font-medium">Category</span>
      </div>
      <h1 class="text-4xl font-bold text-gray-900 mb-2">{category}</h1>
      <p class="text-lg text-gray-600">
        {sortedPosts.length} {sortedPosts.length === 1 ? 'article' : 'articles'} in this category
      </p>
    </div>
    
    <!-- Articles -->
    {sortedPosts.length > 0 ? (
      <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
        {sortedPosts.map((post) => {
          const author = authors.find(a => a.slug === post.data.author);
          return (
            <BlogCard
              title={post.data.title}
              slug={post.slug}
              description={post.data.description}
              author={author?.data.name || 'Unknown Author'}
              authorSlug={post.data.author}
              publishDate={post.data.publishDate}
              category={post.data.category}
              tags={post.data.tags}
              heroImage={post.data.heroImage}
              featured={post.data.featured}
              readingTime={post.data.readingTime}
            />
          );
        })}
      </div>
    ) : (
      <div class="text-center py-12">
        <p class="text-gray-500 text-lg">No articles found in this category.</p>
      </div>
    )}
  </div>
</BaseLayout>