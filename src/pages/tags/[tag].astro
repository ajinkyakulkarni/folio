---
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogCard from '../../components/BlogCard.astro';
import { getCollection } from 'astro:content';

const baseUrl = import.meta.env.BASE_URL;

// Helper to generate URLs
const getUrl = (path: string) => {
  if (path === '/') return baseUrl;
  const base = baseUrl.endsWith('/') ? baseUrl.slice(0, -1) : baseUrl;
  const pathPart = path.startsWith('/') ? path : `/${path}`;
  return `${base}${pathPart}`;
};

export async function getStaticPaths() {
  const allPosts = await getCollection('blog', ({ data }) => !data.draft);
  
  // Get all unique tags
  const tags = new Set();
  allPosts.forEach(post => {
    post.data.tags.forEach(tag => tags.add(tag));
  });
  
  return Array.from(tags).map(tag => ({
    params: { tag },
    props: { tag }
  }));
}

const { tag } = Astro.props;

// Get all posts with this tag
const allPosts = await getCollection('blog', ({ data }) => 
  !data.draft && data.tags.includes(tag)
);

const authors = await getCollection('authors');

// Sort posts by date
const sortedPosts = allPosts.sort(
  (a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf()
);

// Get related tags (tags that appear with this tag)
const relatedTags = new Map();
allPosts.forEach(post => {
  post.data.tags.forEach(postTag => {
    if (postTag !== tag) {
      relatedTags.set(postTag, (relatedTags.get(postTag) || 0) + 1);
    }
  });
});

const topRelatedTags = Array.from(relatedTags.entries())
  .sort((a, b) => b[1] - a[1])
  .slice(0, 10);
---

<BaseLayout title={`Tag: ${tag}`} description={`Articles tagged with ${tag}`}>
  
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <!-- Header -->
    <div class="text-center mb-8">
      <div class="inline-flex items-center bg-indigo-100 rounded-full px-4 py-2 mb-4">
        <svg class="w-5 h-5 text-indigo-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M17.707 9.293a1 1 0 010 1.414l-7 7a1 1 0 01-1.414 0l-7-7A.997.997 0 012 10V5a3 3 0 013-3h5c.256 0 .512.098.707.293l7 7zM5 6a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path>
        </svg>
        <span class="text-indigo-700 font-medium">Tag</span>
      </div>
      <h1 class="text-4xl font-bold text-gray-900 mb-2">#{tag}</h1>
      <p class="text-lg text-gray-600">
        {sortedPosts.length} {sortedPosts.length === 1 ? 'article' : 'articles'} tagged with "{tag}"
      </p>
    </div>
    
    <!-- Articles -->
    {sortedPosts.length > 0 ? (
      <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3 mb-12">
        {sortedPosts.map((post) => {
          const author = authors.find(a => a.slug === post.data.author);
          return (
            <BlogCard
              title={post.data.title}
              slug={post.slug}
              description={post.data.description}
              author={author?.data.name || 'Unknown Author'}
              authorSlug={post.data.author}
              publishDate={post.data.publishDate}
              category={post.data.category}
              tags={post.data.tags}
              heroImage={post.data.heroImage}
              featured={post.data.featured}
              readingTime={post.data.readingTime}
            />
          );
        })}
      </div>
    ) : (
      <div class="text-center py-12">
        <p class="text-gray-500 text-lg">No articles found with this tag.</p>
        <a href={getUrl('/tags')} class="text-indigo-600 hover:text-indigo-800 mt-4 inline-block">
          Browse all tags â†’
        </a>
      </div>
    )}
    
    <!-- Related Tags -->
    {topRelatedTags.length > 0 && (
      <div class="bg-gray-50 rounded-lg p-8">
        <h2 class="text-xl font-semibold mb-4">Related Tags</h2>
        <div class="flex flex-wrap gap-2">
          {topRelatedTags.map(([relatedTag, count]) => (
            <a
              href={getUrl(`/tags/${relatedTag}`)}
              class="inline-flex items-center px-3 py-1 bg-white border border-gray-200 rounded-full text-sm text-gray-700 hover:border-indigo-300 hover:bg-indigo-50 transition-colors"
            >
              #{relatedTag}
              <span class="ml-1 text-gray-500">({count})</span>
            </a>
          ))}
        </div>
      </div>
    )}
    
    <!-- Navigation -->
    <div class="mt-12 text-center">
      <a
        href={getUrl('/tags')}
        class="inline-flex items-center text-indigo-600 hover:text-indigo-800 font-medium"
      >
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
        </svg>
        Browse all tags
      </a>
    </div>
  </div>
</BaseLayout>